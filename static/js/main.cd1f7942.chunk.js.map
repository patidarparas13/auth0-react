{"version":3,"sources":["components/LoginButton.jsx","components/LogoutButton.jsx","components/Profile.jsx","App.js","serviceWorker.js","index.js"],"names":["LoginButton","useAuth0","loginWithRedirect","isAuthenticated","Fragment","onClick","LogoutButton","logout","Profile","user","data","App","isLoading","Boolean","window","location","hostname","match","ReactDOM","render","domain","process","clientId","redirectUri","origin","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNAceA,EAXK,WAAK,IAAD,EACwBC,cAArCC,EADa,EACbA,kBACP,OAFoB,EACKC,iBAGjB,kBAAC,IAAMC,SAAP,KACJ,4BAAQC,QAAS,kBAAIH,MAArB,WCQOI,EAZM,WAAK,IAAD,EACYL,cAA1BM,EADc,EACdA,OACP,OAFqB,EACPJ,iBAGN,kBAAC,IAAMC,SAAP,KACI,4BAAQC,QAAS,kBAAIE,MAArB,Y,gBCUDC,EAhBC,WAAK,IAAD,EACeP,cAAxBQ,EADS,EACTA,KAAKN,EADI,EACJA,gBACZ,OACI,kBAAC,IAAMC,SAAP,KACCD,GACD,kBAAC,IAAMC,SAAP,KACA,4CACR,kBAAC,IAAD,CAAYM,KAAMD,OCWHE,MAdf,WAEE,OADoBV,cAAbW,UACc,2CAEnB,kBAAC,IAAMR,SAAP,KACG,yCACH,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHgBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACL,kBAAC,IAAD,CAAeC,OAJJC,4BAKPC,SAJSD,mCAKTE,YACIT,OAAOC,SAASS,QAEpB,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDgHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cd1f7942.chunk.js","sourcesContent":["import React from 'react';\r\nimport {useAuth0} from '@auth0/auth0-react'\r\n\r\nconst LoginButton = ()=>{\r\n    const {loginWithRedirect,isAuthenticated} = useAuth0();\r\n    return(\r\n        !isAuthenticated && (\r\n            <React.Fragment>\r\n        <button onClick={()=>loginWithRedirect()}>Login</button>\r\n        </React.Fragment>\r\n        )\r\n    )\r\n}\r\n\r\nexport default LoginButton;","import React from 'react';\r\nimport {useAuth0} from '@auth0/auth0-react'\r\n\r\n\r\nconst LogoutButton = ()=>{\r\n    const {logout,isAuthenticated} = useAuth0();\r\n    return(\r\n        isAuthenticated && (\r\n            <React.Fragment>\r\n                <button onClick={()=>logout()}>Logout</button>\r\n            </React.Fragment>\r\n            \r\n        )\r\n    )\r\n}\r\n\r\nexport default LogoutButton;","import React from 'react';\r\nimport {useAuth0} from '@auth0/auth0-react'\r\nimport JsonPretty from 'react-json-pretty';\r\nconst Profile = ()=>{\r\n    const {user,isAuthenticated} = useAuth0();\r\n    return(\r\n        <React.Fragment>\r\n        {isAuthenticated && (\r\n        <React.Fragment>\r\n        <h2>User Profile</h2>\r\n<JsonPretty data={user} />\r\n    </React.Fragment>\r\n    )}\r\n    </React.Fragment>\r\n    )\r\n   \r\n    \r\n}\r\n\r\nexport default Profile;","import React from 'react';\nimport './App.css';\nimport LoginButton from './components/LoginButton'\nimport LogoutButton from './components/LogoutButton'\nimport Profile from './components/Profile'\nimport { useAuth0 } from '@auth0/auth0-react';\n\nfunction App() {\n  const {isLoading} = useAuth0();\n  if(isLoading) return <div>Loading...</div>\n  return (\n    <React.Fragment>\n       <h1>Auth Demo</h1>\n    <LoginButton />\n    <LogoutButton />\n    <Profile />\n    </React.Fragment>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Auth0Provider} from '@auth0/auth0-react'\n\nconst domain = process.env.REACT_APP_AUTH0_DOMAIN\nconst clientId = process.env.REACT_APP_AUTH0_CLIENT_ID\n\nReactDOM.render (\n    <Auth0Provider domain={domain}\n        clientId={clientId}\n        redirectUri={\n            window.location.origin\n    }>\n        <App/>\n    </Auth0Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}